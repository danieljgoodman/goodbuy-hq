generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String                    @id @default(cuid())
  email                    String                    @unique
  name                     String?
  image                    String?
  userType                 UserType                  @default(BUYER)
  status                   UserStatus                @default(PENDING)
  emailVerified            DateTime?
  firstName                String?
  lastName                 String?
  phone                    String?
  company                  String?
  position                 String?
  bio                      String?
  hashedPassword           String?
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  lastLoginAt              DateTime?
  accounts                 Account[]
  businessViews            BusinessView[]
  businesses               Business[]                @relation("BusinessOwner")
  communicationAuditLogs   CommunicationAuditLog[]
  communicationPreferences CommunicationPreferences?
  documentAccessLogs       DocumentAccessLog[]
  evaluations              Evaluation[]
  favorites                Favorite[]
  inquiries                Inquiry[]
  meetingAttendances       MeetingAttendee[]
  meetingReminders         MeetingReminder[]
  organizedMeetings        Meeting[]                 @relation("MeetingOrganizer")
  messageReadReceipts      MessageReadReceipt[]
  sentMessages             Message[]
  notifications            Notification[]
  savedSearches            SavedSearch[]
  sessions                 Session[]
  uploadedDocuments        SharedDocument[]
  threadParticipants       ThreadParticipant[]
  verificationTokens       VerificationToken[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Business {
  id                   String                @id @default(cuid())
  title                String
  description          String
  industry             String?
  location             String?
  website              String?
  askingPrice          Decimal?
  revenue              Decimal?
  profit               Decimal?
  established          DateTime?
  employees            Int?
  status               BusinessStatus        @default(DRAFT)
  featured             Boolean               @default(false)
  images               String[]
  documents            String[]
  slug                 String?               @unique
  metaTitle            String?
  metaDescription      String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  publishedAt          DateTime?
  ownerId              String
  address              String?
  adminNotes           String?
  cashFlow             Decimal?
  category             BusinessCategory?
  city                 String?
  competition          String?
  country              String                @default("US")
  customerBase         Int?
  daysOpen             String[]
  ebitda               Decimal?
  email                String?
  equipment            Decimal?
  expiresAt            DateTime?
  financing            String?
  grossMargin          Float?
  hoursOfOperation     String?
  inquiryCount         Int                   @default(0)
  inventory            Decimal?
  keywords             String[]
  lastViewedAt         DateTime?
  latitude             Float?
  liabilities          Decimal?
  listingType          ListingType           @default(BUSINESS_SALE)
  longitude            Float?
  monthlyRevenue       Decimal?
  negotiations         String?
  netMargin            Float?
  phone                String?
  priority             Int                   @default(0)
  realEstate           Decimal?
  reasonForSelling     String?
  rejectionReason      String?
  reviewedAt           DateTime?
  reviewedBy           String?
  seasonality          String?
  state                String?
  timeframe            String?
  totalAssets          Decimal?
  viewCount            Int                   @default(0)
  virtualTour          String?
  yearlyGrowth         Float?
  zipCode              String?
  documents_rel        BusinessDocument[]
  images_rel           BusinessImage[]
  views                BusinessView[]
  owner                User                  @relation("BusinessOwner", fields: [ownerId], references: [id])
  communicationThreads CommunicationThread[]
  evaluations          Evaluation[]
  favorites            Favorite[]
  inquiries            Inquiry[]

  @@map("businesses")
}

model Evaluation {
  id               String           @id @default(cuid())
  title            String
  summary          String?
  financialScore   Int?
  operationalScore Int?
  marketScore      Int?
  overallScore     Int?
  strengths        String[]
  weaknesses       String[]
  opportunities    String[]
  threats          String[]
  recommendations  String?
  estimatedValue   Decimal?
  status           EvaluationStatus @default(DRAFT)
  isPublic         Boolean          @default(false)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  completedAt      DateTime?
  businessId       String
  evaluatorId      String
  business         Business         @relation(fields: [businessId], references: [id], onDelete: Cascade)
  evaluator        User             @relation(fields: [evaluatorId], references: [id])

  @@map("evaluations")
}

model Favorite {
  id         String   @id @default(cuid())
  userId     String
  businessId String
  createdAt  DateTime @default(now())
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, businessId])
  @@map("favorites")
}

model Inquiry {
  id           String   @id @default(cuid())
  subject      String
  message      String
  contactName  String
  contactEmail String
  contactPhone String?
  isRead       Boolean  @default(false)
  isArchived   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  businessId   String
  userId       String?
  business     Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  user         User?    @relation(fields: [userId], references: [id])

  @@map("inquiries")
}

model CommunicationThread {
  id            String              @id @default(cuid())
  subject       String?
  businessId    String?
  isArchived    Boolean             @default(false)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  lastMessageAt DateTime            @default(now())
  business      Business?           @relation(fields: [businessId], references: [id])
  meetings      Meeting[]
  messages      Message[]
  documents     SharedDocument[]
  participants  ThreadParticipant[]

  @@map("communication_threads")
}

model ThreadParticipant {
  id                  String              @id @default(cuid())
  threadId            String
  userId              String
  joinedAt            DateTime            @default(now())
  leftAt              DateTime?
  isActive            Boolean             @default(true)
  canInvite           Boolean             @default(false)
  isAdmin             Boolean             @default(false)
  allowDirectMessages Boolean             @default(true)
  allowMeetingInvites Boolean             @default(true)
  thread              CommunicationThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([threadId, userId])
  @@map("thread_participants")
}

model Message {
  id           String               @id @default(cuid())
  threadId     String
  senderId     String
  content      String
  status       MessageStatus        @default(SENT)
  isEdited     Boolean              @default(false)
  editedAt     DateTime?
  messageType  String               @default("text")
  metadata     Json?
  replyToId    String?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  scheduledFor DateTime?
  attachments  MessageAttachment[]
  readReceipts MessageReadReceipt[]
  replyTo      Message?             @relation("MessageReplies", fields: [replyToId], references: [id])
  replies      Message[]            @relation("MessageReplies")
  sender       User                 @relation(fields: [senderId], references: [id], onDelete: Cascade)
  thread       CommunicationThread  @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model MessageAttachment {
  id           String   @id @default(cuid())
  messageId    String
  fileName     String
  originalName String
  mimeType     String
  size         Int
  path         String
  isScanned    Boolean  @default(false)
  scanResult   String?
  createdAt    DateTime @default(now())
  message      Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("message_attachments")
}

model MessageReadReceipt {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  readAt    DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@map("message_read_receipts")
}

model Meeting {
  id                   String               @id @default(cuid())
  threadId             String?
  organizerId          String
  title                String
  description          String?
  status               MeetingStatus        @default(SCHEDULED)
  scheduledStart       DateTime
  scheduledEnd         DateTime
  actualStart          DateTime?
  actualEnd            DateTime?
  timezone             String               @default("UTC")
  location             String?
  meetingType          String               @default("virtual")
  isRecurring          Boolean              @default(false)
  recurringRule        Json?
  maxAttendees         Int?
  requiresConfirmation Boolean              @default(true)
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  attendees            MeetingAttendee[]
  reminders            MeetingReminder[]
  organizer            User                 @relation("MeetingOrganizer", fields: [organizerId], references: [id])
  thread               CommunicationThread? @relation(fields: [threadId], references: [id])

  @@map("meetings")
}

model MeetingAttendee {
  id         String    @id @default(cuid())
  meetingId  String
  userId     String
  status     String    @default("invited")
  responseAt DateTime?
  notes      String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  meeting    Meeting   @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([meetingId, userId])
  @@map("meeting_attendees")
}

model MeetingReminder {
  id           String    @id @default(cuid())
  meetingId    String
  userId       String
  reminderTime DateTime
  isSent       Boolean   @default(false)
  sentAt       DateTime?
  meeting      Meeting   @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("meeting_reminders")
}

model SharedDocument {
  id            String               @id @default(cuid())
  threadId      String?
  uploaderId    String
  fileName      String
  originalName  String
  description   String?
  mimeType      String
  size          Int
  path          String
  accessLevel   DocumentAccessLevel  @default(SHARED)
  category      String?
  tags          String[]
  version       String               @default("1.0")
  isEncrypted   Boolean              @default(false)
  encryptionKey String?
  isScanned     Boolean              @default(false)
  scanResult    String?
  expiresAt     DateTime?
  downloadCount Int                  @default(0)
  maxDownloads  Int?
  requiresAuth  Boolean              @default(true)
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  accessLogs    DocumentAccessLog[]
  thread        CommunicationThread? @relation(fields: [threadId], references: [id])
  uploader      User                 @relation(fields: [uploaderId], references: [id])

  @@map("shared_documents")
}

model DocumentAccessLog {
  id         String         @id @default(cuid())
  documentId String
  userId     String
  action     String
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime       @default(now())
  document   SharedDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user       User           @relation(fields: [userId], references: [id])

  @@map("document_access_logs")
}

model Notification {
  id           String             @id @default(cuid())
  userId       String
  type         NotificationType
  status       NotificationStatus @default(PENDING)
  title        String
  message      String
  actionUrl    String?
  data         Json?
  priority     String             @default("normal")
  channel      String[]           @default(["in_app"])
  scheduledFor DateTime?
  sentAt       DateTime?
  readAt       DateTime?
  dismissedAt  DateTime?
  relatedId    String?
  relatedType  String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model CommunicationPreferences {
  id                   String   @id @default(cuid())
  userId               String   @unique
  emailNewMessages     Boolean  @default(true)
  emailMeetingInvites  Boolean  @default(true)
  emailDocumentShares  Boolean  @default(true)
  emailDigest          Boolean  @default(true)
  digestFrequency      String   @default("daily")
  showReadReceipts     Boolean  @default(true)
  showOnlineStatus     Boolean  @default(true)
  allowDirectMessages  Boolean  @default(true)
  defaultMeetingLength Int      @default(30)
  workingHoursStart    String   @default("09:00")
  workingHoursEnd      String   @default("17:00")
  timezone             String   @default("UTC")
  shareContactInfo     Boolean  @default(false)
  allowPublicProfile   Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("communication_preferences")
}

model CommunicationAuditLog {
  id         String   @id @default(cuid())
  userId     String
  action     String
  entityType String
  entityId   String
  details    Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])

  @@map("communication_audit_logs")
}

model BusinessImage {
  id           String   @id @default(cuid())
  businessId   String
  url          String
  thumbnailUrl String?
  alt          String?
  caption      String?
  isPrimary    Boolean  @default(false)
  orderIndex   Int      @default(0)
  originalName String?
  size         Int?
  width        Int?
  height       Int?
  format       String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  business     Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("business_images")
}

model BusinessDocument {
  id             String   @id @default(cuid())
  businessId     String
  name           String
  description    String?
  url            String
  type           String
  size           Int?
  mimeType       String?
  isConfidential Boolean  @default(true)
  requiresNDA    Boolean  @default(false)
  accessLevel    String   @default("owner_only")
  downloadCount  Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  business       Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("business_documents")
}

model BusinessView {
  id         String   @id @default(cuid())
  businessId String
  userId     String?
  ipAddress  String?
  userAgent  String?
  referrer   String?
  sessionId  String?
  duration   Int?
  createdAt  DateTime @default(now())
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  user       User?    @relation(fields: [userId], references: [id])

  @@map("business_views")
}

model SavedSearch {
  id            String    @id @default(cuid())
  userId        String
  name          String
  query         Json
  emailAlerts   Boolean   @default(false)
  lastAlertSent DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("saved_searches")
}

model VerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  email     String
  expires   DateTime
  createdAt DateTime @default(now())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([email, token])
  @@map("verification_tokens")
}

enum UserType {
  BUSINESS_OWNER
  BUYER
  BROKER
  ADMIN
}

enum UserStatus {
  PENDING
  ACTIVE
  SUSPENDED
  DELETED
}

enum BusinessStatus {
  DRAFT
  ACTIVE
  UNDER_REVIEW
  SOLD
  ARCHIVED
  REJECTED
  EXPIRED
}

enum BusinessCategory {
  RESTAURANT
  RETAIL
  ECOMMERCE
  TECHNOLOGY
  MANUFACTURING
  SERVICES
  HEALTHCARE
  REAL_ESTATE
  AUTOMOTIVE
  ENTERTAINMENT
  EDUCATION
  OTHER
}

enum ListingType {
  BUSINESS_SALE
  ASSET_SALE
  FRANCHISE
  PARTNERSHIP
  INVESTMENT
}

enum EvaluationStatus {
  DRAFT
  IN_PROGRESS
  COMPLETED
  PUBLISHED
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
  DELETED
}

enum MeetingStatus {
  SCHEDULED
  CONFIRMED
  CANCELLED
  COMPLETED
  RESCHEDULED
}

enum DocumentAccessLevel {
  PUBLIC
  PRIVATE
  SHARED
}

enum NotificationType {
  MESSAGE
  MEETING_INVITE
  MEETING_REMINDER
  DOCUMENT_SHARED
  INQUIRY_RECEIVED
  SYSTEM_ALERT
}

enum NotificationStatus {
  PENDING
  SENT
  READ
  DISMISSED
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Types Enum
enum UserType {
  BUSINESS_OWNER
  BUYER
  BROKER
  ADMIN
}

// User Status
enum UserStatus {
  PENDING
  ACTIVE
  SUSPENDED
  DELETED
}

// Business Status
enum BusinessStatus {
  DRAFT
  ACTIVE
  UNDER_REVIEW
  SOLD
  ARCHIVED
}

// Evaluation Status
enum EvaluationStatus {
  DRAFT
  IN_PROGRESS
  COMPLETED
  PUBLISHED
}

// Main User model
model User {
  id            String       @id @default(cuid())
  email         String       @unique
  name          String?
  image         String?
  userType      UserType     @default(BUYER)
  status        UserStatus   @default(PENDING)
  emailVerified DateTime?
  
  // Profile information
  firstName     String?
  lastName      String?
  phone         String?
  company       String?
  position      String?
  bio           String?
  
  // Authentication
  hashedPassword String?
  
  // Timestamps
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  lastLoginAt   DateTime?
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  businesses    Business[]   @relation("BusinessOwner")
  evaluations   Evaluation[]
  favorites     Favorite[]
  inquiries     Inquiry[]
  
  // Communication system relations
  threadParticipants ThreadParticipant[]
  sentMessages  Message[]
  messageReadReceipts MessageReadReceipt[]
  organizedMeetings Meeting[] @relation("MeetingOrganizer")
  meetingAttendances MeetingAttendee[]
  meetingReminders MeetingReminder[]
  uploadedDocuments SharedDocument[]
  documentAccessLogs DocumentAccessLog[]
  notifications Notification[]
  communicationPreferences CommunicationPreferences?
  communicationAuditLogs CommunicationAuditLog[]
  
  // Email verification
  verificationTokens VerificationToken[]
  
  @@map("users")
}

// NextAuth Account model
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// NextAuth Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Business model
model Business {
  id          String         @id @default(cuid())
  title       String
  description String
  industry    String?
  location    String?
  website     String?
  
  // Financial information
  askingPrice     Decimal?
  revenue         Decimal?
  profit          Decimal?
  established     DateTime?
  employees       Int?
  
  // Status and metadata
  status          BusinessStatus @default(DRAFT)
  featured        Boolean        @default(false)
  
  // Media
  images          String[]
  documents       String[]
  
  // SEO
  slug            String?        @unique
  metaTitle       String?
  metaDescription String?
  
  // Timestamps
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  publishedAt     DateTime?
  
  // Relations
  ownerId         String
  owner           User           @relation("BusinessOwner", fields: [ownerId], references: [id])
  evaluations     Evaluation[]
  favorites       Favorite[]
  inquiries       Inquiry[]
  communicationThreads CommunicationThread[]
  
  @@map("businesses")
}

// Business Evaluation model
model Evaluation {
  id          String            @id @default(cuid())
  title       String
  summary     String?
  
  // Evaluation details
  financialScore    Int?       // 1-100
  operationalScore  Int?       // 1-100
  marketScore       Int?       // 1-100
  overallScore      Int?       // 1-100
  
  // Detailed analysis
  strengths         String[]
  weaknesses        String[]
  opportunities     String[]
  threats           String[]
  
  // Recommendations
  recommendations   String?
  estimatedValue    Decimal?
  
  // Status and metadata
  status            EvaluationStatus @default(DRAFT)
  isPublic          Boolean          @default(false)
  
  // Timestamps
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  completedAt       DateTime?
  
  // Relations
  businessId        String
  business          Business         @relation(fields: [businessId], references: [id], onDelete: Cascade)
  evaluatorId       String
  evaluator         User             @relation(fields: [evaluatorId], references: [id])
  
  @@map("evaluations")
}

// User favorites
model Favorite {
  id         String   @id @default(cuid())
  userId     String
  businessId String
  createdAt  DateTime @default(now())
  
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  
  @@unique([userId, businessId])
  @@map("favorites")
}

// Business inquiries
model Inquiry {
  id         String   @id @default(cuid())
  subject    String
  message    String
  
  // Contact information
  contactName  String
  contactEmail String
  contactPhone String?
  
  // Status
  isRead       Boolean  @default(false)
  isArchived   Boolean  @default(false)
  
  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  businessId   String
  business     Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  userId       String?
  user         User?    @relation(fields: [userId], references: [id])
  
  @@map("inquiries")
}

// Message Status
enum MessageStatus {
  SENT
  DELIVERED
  READ
  DELETED
}

// Meeting Status
enum MeetingStatus {
  SCHEDULED
  CONFIRMED
  CANCELLED
  COMPLETED
  RESCHEDULED
}

// Document Access Level
enum DocumentAccessLevel {
  PUBLIC
  PRIVATE
  SHARED
}

// Notification Type
enum NotificationType {
  MESSAGE
  MEETING_INVITE
  MEETING_REMINDER
  DOCUMENT_SHARED
  INQUIRY_RECEIVED
  SYSTEM_ALERT
}

// Notification Status
enum NotificationStatus {
  PENDING
  SENT
  READ
  DISMISSED
}

// Communication Threads (Conversations)
model CommunicationThread {
  id          String   @id @default(cuid())
  subject     String?
  businessId  String?
  isArchived  Boolean  @default(false)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastMessageAt DateTime @default(now())
  
  // Relations
  business    Business? @relation(fields: [businessId], references: [id], onDelete: SetNull)
  messages    Message[]
  participants ThreadParticipant[]
  meetings    Meeting[]
  documents   SharedDocument[]
  
  @@map("communication_threads")
}

// Thread Participants
model ThreadParticipant {
  id          String   @id @default(cuid())
  threadId    String
  userId      String
  joinedAt    DateTime @default(now())
  leftAt      DateTime?
  isActive    Boolean  @default(true)
  canInvite   Boolean  @default(false)
  isAdmin     Boolean  @default(false)
  
  // Privacy settings
  allowDirectMessages Boolean @default(true)
  allowMeetingInvites Boolean @default(true)
  
  // Relations
  thread      CommunicationThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([threadId, userId])
  @@map("thread_participants")
}

// Messages
model Message {
  id          String        @id @default(cuid())
  threadId    String
  senderId    String
  content     String
  status      MessageStatus @default(SENT)
  isEdited    Boolean       @default(false)
  editedAt    DateTime?
  
  // Message metadata
  messageType String        @default("text") // text, file, meeting_invite, system
  metadata    Json?
  
  // Reply functionality
  replyToId   String?
  replyTo     Message?      @relation("MessageReplies", fields: [replyToId], references: [id])
  replies     Message[]     @relation("MessageReplies")
  
  // Timestamps
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  scheduledFor DateTime?
  
  // Relations
  thread      CommunicationThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  sender      User          @relation(fields: [senderId], references: [id], onDelete: Cascade)
  attachments MessageAttachment[]
  readReceipts MessageReadReceipt[]
  
  @@map("messages")
}

// Message Attachments
model MessageAttachment {
  id          String   @id @default(cuid())
  messageId   String
  fileName    String
  originalName String
  mimeType    String
  size        Int
  path        String
  
  // Security
  isScanned   Boolean  @default(false)
  scanResult  String?
  
  // Timestamps
  createdAt   DateTime @default(now())
  
  // Relations
  message     Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  
  @@map("message_attachments")
}

// Message Read Receipts
model MessageReadReceipt {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  readAt    DateTime @default(now())
  
  // Relations
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([messageId, userId])
  @@map("message_read_receipts")
}

// Meeting Scheduler
model Meeting {
  id            String        @id @default(cuid())
  threadId      String?
  organizerId   String
  title         String
  description   String?
  status        MeetingStatus @default(SCHEDULED)
  
  // Meeting details
  scheduledStart DateTime
  scheduledEnd   DateTime
  actualStart    DateTime?
  actualEnd      DateTime?
  timezone       String        @default("UTC")
  location       String?       // Physical or virtual meeting link
  meetingType    String        @default("virtual") // virtual, physical, phone
  
  // Meeting settings
  isRecurring    Boolean       @default(false)
  recurringRule  Json?
  maxAttendees   Int?
  requiresConfirmation Boolean @default(true)
  
  // Timestamps
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Relations
  thread        CommunicationThread? @relation(fields: [threadId], references: [id], onDelete: SetNull)
  organizer     User          @relation("MeetingOrganizer", fields: [organizerId], references: [id])
  attendees     MeetingAttendee[]
  reminders     MeetingReminder[]
  
  @@map("meetings")
}

// Meeting Attendees
model MeetingAttendee {
  id          String   @id @default(cuid())
  meetingId   String
  userId      String
  status      String   @default("invited") // invited, accepted, declined, tentative
  responseAt  DateTime?
  notes       String?
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  meeting     Meeting  @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([meetingId, userId])
  @@map("meeting_attendees")
}

// Meeting Reminders
model MeetingReminder {
  id          String   @id @default(cuid())
  meetingId   String
  userId      String
  reminderTime DateTime
  isSent      Boolean  @default(false)
  sentAt      DateTime?
  
  // Relations
  meeting     Meeting  @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("meeting_reminders")
}

// Shared Documents
model SharedDocument {
  id            String              @id @default(cuid())
  threadId      String?
  uploaderId    String
  fileName      String
  originalName  String
  description   String?
  mimeType      String
  size          Int
  path          String
  accessLevel   DocumentAccessLevel @default(SHARED)
  
  // Document metadata
  category      String?
  tags          String[]
  version       String              @default("1.0")
  
  // Security and compliance
  isEncrypted   Boolean             @default(false)
  encryptionKey String?
  isScanned     Boolean             @default(false)
  scanResult    String?
  expiresAt     DateTime?
  
  // Access control
  downloadCount Int                 @default(0)
  maxDownloads  Int?
  requiresAuth  Boolean             @default(true)
  
  // Timestamps
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  
  // Relations
  thread        CommunicationThread? @relation(fields: [threadId], references: [id], onDelete: SetNull)
  uploader      User                @relation(fields: [uploaderId], references: [id])
  accessLogs    DocumentAccessLog[]
  
  @@map("shared_documents")
}

// Document Access Logs (for audit trail)
model DocumentAccessLog {
  id          String   @id @default(cuid())
  documentId  String
  userId      String
  action      String   // view, download, share, delete
  ipAddress   String?
  userAgent   String?
  
  // Timestamps
  createdAt   DateTime @default(now())
  
  // Relations
  document    SharedDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id])
  
  @@map("document_access_logs")
}

// Notifications
model Notification {
  id          String             @id @default(cuid())
  userId      String
  type        NotificationType
  status      NotificationStatus @default(PENDING)
  title       String
  message     String
  actionUrl   String?
  
  // Notification metadata
  data        Json?
  priority    String             @default("normal") // low, normal, high, urgent
  channel     String[]           @default(["in_app"]) // in_app, email, sms, push
  
  // Scheduling
  scheduledFor DateTime?
  sentAt      DateTime?
  readAt      DateTime?
  dismissedAt DateTime?
  
  // Relations
  relatedId   String? // ID of related entity (message, meeting, etc.)
  relatedType String? // Type of related entity
  
  // Timestamps
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  
  // Relations
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

// Communication Preferences
model CommunicationPreferences {
  id               String   @id @default(cuid())
  userId           String   @unique
  
  // Email preferences
  emailNewMessages Boolean  @default(true)
  emailMeetingInvites Boolean @default(true)
  emailDocumentShares Boolean @default(true)
  emailDigest      Boolean  @default(true)
  digestFrequency  String   @default("daily") // daily, weekly, never
  
  // In-app preferences
  showReadReceipts Boolean  @default(true)
  showOnlineStatus Boolean  @default(true)
  allowDirectMessages Boolean @default(true)
  
  // Meeting preferences
  defaultMeetingLength Int   @default(30) // minutes
  workingHoursStart String  @default("09:00")
  workingHoursEnd   String  @default("17:00")
  timezone          String  @default("UTC")
  
  // Privacy preferences
  shareContactInfo  Boolean @default(false)
  allowPublicProfile Boolean @default(true)
  
  // Timestamps
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("communication_preferences")
}

// Audit Trail for Communications
model CommunicationAuditLog {
  id          String   @id @default(cuid())
  userId      String
  action      String   // message_sent, message_read, document_shared, meeting_scheduled, etc.
  entityType  String   // message, document, meeting, thread
  entityId    String
  details     Json?
  ipAddress   String?
  userAgent   String?
  
  // Timestamps
  createdAt   DateTime @default(now())
  
  // Relations
  user        User     @relation(fields: [userId], references: [id])
  
  @@map("communication_audit_logs")
}

// Email verification tokens
model VerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  email     String
  expires   DateTime
  createdAt DateTime @default(now())
  
  // Relations
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([email, token])
  @@map("verification_tokens")
}